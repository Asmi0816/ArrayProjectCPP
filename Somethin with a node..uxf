<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>820</y>
      <w>340</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
- nodePointer : IntNode *
--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : constructor
+ IntNode(int value) : init
+ IntNode(int value, IntNode * nextNode) : init
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1680</x>
      <y>750</y>
      <w>140</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Aricks mega proj

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>1140</y>
      <w>340</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *


--
+ IntNodeArray(int size) : init
+ setAtIndex(int index, int value) : void
+ get FromIndex(int index) : int
+ getSize() : int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1100</x>
      <y>1260</y>
      <w>350</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>Model :: Node&lt;Type&gt;
--

- nodeData : Type
- nodePointer : Node&lt;Type&gt; *

--

+ Node() : init
+ Node(Type value) : init
+ Note(Type data, Node&lt;Type&gt; * pointer) : init

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData(Type data) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void
bg=8374633</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1670</x>
      <y>840</y>
      <w>480</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>Model :: Array&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *


--
inits:
+ Array() : init
+ Array(int size) : init

advanced:
+ ~Array&lt;Types&gt;() : deconstructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

Methods:
+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type

+ getSize() : int
+ getFrontIndex(int index) : Type
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1440</x>
      <y>950</y>
      <w>250</w>
      <h>470</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>230.0;10.0;210.0;220.0;10.0;450.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1670</x>
      <y>1200</y>
      <w>500</w>
      <h>370</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *


--
inits:
+ List&lt;Type&gt;() : init
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; scource)) : copy init
+ ~List&lt;Types&gt;() : deconstructor

Methods:
+ setAtIndex(int index, Type data) : Type
+ addAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type
+ addFront(Type value) : void
+ addEnd (Type value) : void
+ remove(int index) : Type
+ contains(Type data) : Type
+ getSize() : int
+ getFront() const : Node&lt;Type&gt; *
+ getEnd() const : Node&lt;Type&gt; *
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1440</x>
      <y>1350</y>
      <w>250</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>230.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>790</x>
      <y>1110</y>
      <w>160</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;30.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1240</x>
      <y>1120</y>
      <w>40</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;140.0;20.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>980</x>
      <y>850</y>
      <w>670</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- previous : BiDirectionalNode&lt;Type&gt; *
- next : BiDirectionalNode&lt;Type&gt; *
--
+ BiDirectionalNode() : init
+ BiDirectionalNode(Type data) : init
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; * previous, 
                                                       BiDirectionalNode&lt;Type&gt; * next ) : init
+ getNodeData() : Type
+ setNodeData(Type data) : void                                                       
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; * 
+ setPrviousNode(BiDirectionalNode&lt;Type&gt; * previous) : void
+ getNextNode() : BiDirectionalNode&lt;Type&gt; *
+ setNextNode(BiDirectionalNode&lt;Type&gt; * next) : void


bg=#54444</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1490</x>
      <y>440</y>
      <w>470</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>DoublyLinkedList&lt;Type&gt;
--
-front : BiDirectionalNode&lt;Type&gt;*
-end : BiDirectionalNode&lt;Type&gt;*
-size : int

--

Non virtual methods
+ getSize() const : int
+ getFront() const :  : BiDirectionalNode&lt;Type&gt;*
+ getEnd() const :  : BiDirectionalNode&lt;Type&gt;*

virtual methods
/+add(Type value)/
/+remove(int)/

bg=#b456</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>810</x>
      <y>420</y>
      <w>360</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList
--
-front: BiDIrectionalNode&lt;Type&gt; *
-end : BiDIrectionalNode&lt;Type&gt; *
-size : int

--
+ CircularList() : constructor
+ ~CircularList() : deconstructor

+ add(Type data) : void
+ remove(int index) : Type

+addAtIndex(int index, Type data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1220</x>
      <y>0</y>
      <w>280</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>Queue
--
-front: BiDIrectionalNode&lt;Type&gt; *
-end : BiDIrectionalNode&lt;Type&gt; *
-size : int
--
+ Queue() : init
+ ~Queue() : deinit

+ add() : void
+remove(int) : Type

+ dequeue() : Type
+ enqueue(Type data):void
+ peek() : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>820</x>
      <y>100</y>
      <w>300</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Stack
--
-front: BiDIrectionalNode&lt;Type&gt; *
-end : BiDIrectionalNode&lt;Type&gt; *
-size : int

--
+ Stack : constuctor
+ ~Stack() : destructor

+ add() : void
+remove(int) : Type

+peek() : Type
+push(Type data) : void
+pop() : Type
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1480</x>
      <y>30</y>
      <w>40</w>
      <h>500</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;480.0;20.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1110</x>
      <y>130</y>
      <w>400</w>
      <h>400</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>380.0;380.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1160</x>
      <y>420</y>
      <w>350</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>330.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1390</x>
      <y>620</y>
      <w>210</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0;10.0;170.0;170.0;170.0;170.0;230.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1570</x>
      <y>30</y>
      <w>320</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
-front: BiDIrectionalNode&lt;Type&gt; *
-end : BiDIrectionalNode&lt;Type&gt; *
-size : int
--
+DoubleList() : init
+~DoubleList() : deinit


+ add() : void
+remove(int) : Type

+addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addAtIndexFast(int index, Type data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1480</x>
      <y>280</y>
      <w>110</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;230.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>730</x>
      <y>1740</y>
      <w>500</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
-nodeData : Type(inherited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt;*
-leftChildPointer : BinarySearchTreeNode&lt;Type&gt;*
-rightChildPointer : BinarySearchTreeNode&lt;Type&gt;*
--

+BinarySearchTreeNode() : init
+BinarySearchTreeNode(type data) : init

+getRootPointer() : BinarySearchTreeNode&lt;Type&gt;*
+getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt;*
+getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt;*


+setRootPointer( BinarySearchTreeNode&lt;Type&gt;* root) : void
+setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt;* left) : void
+setRightChildPointer( BinarySearchTreeNode&lt;Type&gt;* right) : void

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>990</x>
      <y>1550</y>
      <w>170</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>150.0;10.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1360</x>
      <y>1660</y>
      <w>550</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>Model :: Tree&lt;Type&gt;
--
+getSize() : int
+getHeight() : int
+getComplete() : bool
+getBalanced() : bool

+inOrderTraversal() : void
+preOrderTraversal() : void
+postOrderTraversal() : void

+insert(Type) : void
+ contains(Type) :void
+ remove(Type) : void

bg=#f54332</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>900</x>
      <y>2210</y>
      <w>760</w>
      <h>660</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--

-root : BinarySearchTreeNode&lt;Type&gt;*
-size : int(inherited)
-height : int(inherited)
-complete : bool(inherited)
-balanced : bool(inherited)
--

+ BinarySearchTree() : init
+ ~BinarySearchTree() : init

+getRoot() : BinarySearchTreeNode&lt;Type&gt;*
+setRootPointer( BinarySearchTreeNode&lt;Type&gt;* root) : void

- calculateSize(BinarySearchTreeNode&lt;ype&gt;*) : int
+ getSize() : int

-inOrderTraversal() : void
-preOrderTraversal() : void
-postOrderTraversal() : void
- removeNode(BinarySearchTreeNode&lt;ype&gt;*) : void

+inOrderTraversal() : void
+preOrderTraversal() : void
+postOrderTraversal() : void
+printToFile() : void

+insert(Type) :void
+contains(Type) : void
+remove(Type) : void
bg=#6634245</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1090</x>
      <y>2070</y>
      <w>30</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1090</x>
      <y>2030</y>
      <w>360</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>340.0;10.0;10.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>1740</y>
      <w>660</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>Model :: AVLTree&lt;Type&gt;
--
# root : BinarySearchTreeNode&lt;Type&gt;*(inherited)
--

+AVLTree() : init
+~AVLTree() : de-init

-leftRotation(BinarySearchTreeNode&lt;Type&gt;* parent) : BinarySearchTreeNode&lt;Type&gt;*
-rightRotation(BinarySearchTreeNode&lt;Type&gt;* first) : BinarySearchTreeNode&lt;Type&gt;*
-leftRightRotation(BinarySearchTreeNode&lt;Type&gt;* first) : BinarySearchTreeNode&lt;Type&gt;*
-rightLeftRotation(BinarySearchTreeNode&lt;Type&gt;* first) : BinarySearchTreeNode&lt;Type&gt;*

-insertNode( BinarySearchTreeNode&lt;Type&gt; * Type value) :  BinarySearchTreeNode&lt;Type&gt;*
-removeNode( BinarySearchTreeNode&lt;Type&gt; * Type value) :  BinarySearchTreeNode&lt;Type&gt;*
-balanceSubTree( BinarySearchTreeNode&lt;Type&gt;*) :  BinarySearchTreeNode&lt;Type&gt;*
-heightDifference( BinarySearchTreeNode&lt;Type&gt;* parent) :int

+remove(Type) : void
+insert(Type) : void
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>650</x>
      <y>1820</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
