<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>380</y>
      <w>340</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
- nodePointer : IntNode *
--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : constructor
+ IntNode(int value) : init
+ IntNode(int value, IntNode * nextNode) : init
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>350</x>
      <y>380</y>
      <w>140</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Aricks mega proj

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>700</y>
      <w>340</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *


--
+ IntNodeArray(int size) : init
+ setAtIndex(int index, int value) : void
+ get FromIndex(int index) : int
+ getSize() : int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>500</x>
      <y>380</y>
      <w>350</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>Model :: Node&lt;Type&gt;
--

- nodeData : Type
- nodePointer : Node&lt;Type&gt; *

--

+ Node() : init
+ Node(Type value) : init
+ Note(Type data, Node&lt;Type&gt; * pointer) : init

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData(Type data) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void
bg=8374633</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1040</x>
      <y>400</y>
      <w>480</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>Model :: Array&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *


--
inits:
+ Array() : init
+ Array(int size) : init

advanced:
+ ~Array&lt;Types&gt;() : deconstructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

Methods:
+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type

+ getSize() : int
+ getFrontIndex(int index) : Type
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>840</x>
      <y>510</y>
      <w>220</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>200.0;10.0;60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1040</x>
      <y>760</y>
      <w>500</w>
      <h>370</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *


--
inits:
+ List&lt;Type&gt;() : init
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; scource)) : copy init
+ ~List&lt;Types&gt;() : deconstructor

Methods:
+ setAtIndex(int index, Type data) : Type
+ addAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type
+ addFront(Type value) : void
+ addEnd (Type value) : void
+ remove(int index) : Type
+ contains(Type data) : Type
+ getSize() : int
+ getFront() const : Node&lt;Type&gt; *
+ getEnd() const : Node&lt;Type&gt; *
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>840</x>
      <y>520</y>
      <w>220</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>200.0;400.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>160</x>
      <y>670</y>
      <w>160</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;30.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>620</x>
      <y>670</y>
      <w>30</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;310.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>350</x>
      <y>980</y>
      <w>670</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- previous : BiDirectionalNode&lt;Type&gt; *
- next : BiDirectionalNode&lt;Type&gt; *
--
+ BiDirectionalNode() : init
+ BiDirectionalNode(Type data) : init
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; * previous, 
                                                       BiDirectionalNode&lt;Type&gt; * next ) : init
+ getNodeData() : Type
+ setNodeData(Type data) : void                                                       
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; * 
+ setPrviousNode(BiDirectionalNode&lt;Type&gt; * previous) : void
+ getNextNode() : BiDirectionalNode&lt;Type&gt; *
+ setNextNode(BiDirectionalNode&lt;Type&gt; * next) : void


bg=#54444</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>860</x>
      <y>0</y>
      <w>470</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>DoublyLinkedList&lt;Type&gt;
--
-front : BiDirectionalNode&lt;Type&gt;*
-end : BiDirectionalNode&lt;Type&gt;*
-size : int

--

Non virtual methods
+getSize() const : int
+ getFront() const :  : BiDirectionalNode&lt;Type&gt;*
+ getEnd() const :  : BiDirectionalNode&lt;Type&gt;*

virtual methods
+add(Type value)
+remove(int)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>430</x>
      <y>260</y>
      <w>210</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>370</x>
      <y>20</y>
      <w>210</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Queue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>380</x>
      <y>140</y>
      <w>210</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Stack</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>50</y>
      <w>310</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>290.0;20.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>580</x>
      <y>60</y>
      <w>300</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>280.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>630</x>
      <y>60</y>
      <w>250</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>230.0;10.0;10.0;210.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>760</x>
      <y>180</y>
      <w>220</w>
      <h>820</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0;10.0;170.0;170.0;170.0;180.0;800.0</additional_attributes>
  </element>
</diagram>
